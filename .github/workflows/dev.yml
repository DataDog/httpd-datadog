name: Development
on: [push, workflow_dispatch]

jobs:
  format:
    runs-on: ubuntu-22.04
    container:
      image: datadog/docker-library:dd-trace-cpp-ci
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/codestyle.sh lint

  build:
    needs: format
    runs-on: ubuntu-22.04
    container:
      image: datadog/docker-library:httpd-datadog-ci-2.4-e5dd7ac
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=/sysroot/x86_64-none-linux-musl/Toolchain.cmake -DHTTPD_SRC_DIR=/httpd -DHTTPD_DATADOG_ENABLE_COVERAGE=1 -DCMAKE_BUILD_TYPE=Debug .
      - name: Build
        run: |
          cmake --build build -j --verbose
          cmake --install build --prefix dist
      - name: Export library
        uses:  actions/upload-artifact@v3
        with:
          name: mod_datadog_artifact
          path: dist/lib/mod_datadog.so
          if-no-files-found: error

  test:
    needs: build
    runs-on: ubuntu-22.04
    container:
      image: datadog/docker-library:httpd-datadog-ci-2.4-e5dd7ac
    env:
      DD_ENV: ci
      DD_API_KEY: ${{ secrets.DD_API_KEY_CI_APP }}
      DD_SERVICE: httpd-tests
      DD_CIVISIBILITY_AGENTLESS_ENABLED: true
      LLVM_PROFILE_FILE: /tmp/httpd.%p-%m.profraw
    steps:
      - uses: actions/checkout@v4
      - run: |
          pip install -r requirements.txt --break-system-packages
          pip install ddtrace --break-system-packages
      - name: Import library from build job
        uses: actions/download-artifact@v3
        with:
          name: mod_datadog_artifact
          path: dist/lib
      - name: Run Smoke Tests
        run: pytest --ddtrace test/integration-test --module-path dist/lib/mod_datadog.so --bin-path /httpd/httpd-build/bin/apachectl --log-dir $(pwd)/logs -m smoke
      - name: Run Integration Tests
        run: pytest --ddtrace test/integration-test --module-path dist/lib/mod_datadog.so --bin-path /httpd/httpd-build/bin/apachectl --log-dir $(pwd)/logs -m ci
      - name: Generate code coverage
        run: |
          llvm-profdata merge -sparse /tmp/*.profraw -o /tmp/default.profdata 
          llvm-cov export dist/lib/mod_datadog.so -format=lcov -instr-profile=/tmp/default.profdata -ignore-filename-regex=/httpd/ > coverage.lcov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          files: coverage.lcov
          name: github-actions
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: DataDog/httpd-datadog
          os: alpine
          fail_ci_if_error: true

